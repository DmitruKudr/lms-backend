generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================= base_statuses_enum =========================

enum BaseStatusesEnum {
  Active
  Archived

  @@map("base_statuses_enum")
}

// ========================= users =========================

// ===== user_roles =====

model UserRole {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title       String                    @unique
  permissions UserRolePermissionsEnum[]
  type        UserRoleTypesEnum

  Users User[]

  @@map("user_roles")
}

enum UserRoleTypesEnum {
  Student
  Teacher
  Parent
  Admin
  // SuperAdmin
  // SelfStudent
  // TestCreator

  @@map("user_role_types_enum")
}

enum UserRolePermissionsEnum {
  // ===== super admin permissions =====
  All
  CreateSpecialUsers
  ManageUsers
  ManageAdmins
  ManageUserRoles
  ArchiveEverything
  // ===== admin permissions =====
  CreateDefaultUsers
  CreateTests
  CreateTodos
  CreateGroups
  CreateComments
  ManageUserProfiles
  ManageTests
  ManageTodos
  ManageGroups
  ManageSubjects
  ManageComments
  FindAllUsers
  // ===== user permissions =====
  CreateMyTests
  CreateMyGroups
  CreateMyTodos
  CreateCommentsForMyStudents
  ManageMyProfile
  ManageMyTests
  ManageMyTodos
  ManageMyStudentsTodos
  ConnectToStudents
  ConnectToTeachers
  ConnectToParents

  @@map("user_role_permissions_enum")
}

// ===== users =====

model User {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  name         String
  username     String  @unique
  email        String? @unique
  password     String
  avatar       String?
  recoveryLink String? @unique @map("recovery_link")

  UserRole UserRole @relation(fields: [roleId], references: [id])
  roleId   String   @map("role_id")

  Parent  Parent?
  Student Student?
  Teacher Teacher?

  @@map("users")
}

// ===== parents =====

model Parent {
  id   String  @id @unique
  post String?

  User User @relation(fields: [id], references: [id])

  Students Student[]

  @@map("parents")
}

// ===== students =====

model Student {
  id          String    @id @unique
  institution String?
  birthDate   DateTime? @map("birth_date")

  User User @relation(fields: [id], references: [id])

  Groups   Group[]
  Teachers TeacherToStudent[]
  Parents  Parent[]

  @@map("students")
}

// ===== teachers =====

model Teacher {
  id             String  @id @unique
  institution    String?
  post           String?
  invitationLink String? @unique @map("invitation_link")

  User User @relation(fields: [id], references: [id])

  Students TeacherToStudent[]
  Groups   Group[]
  Subjects Subject[]
  Tests    Test[]
  Comments Comment[]
  Todos    Todo[]

  @@map("teachers")
}

// ===== teacher_to_student =====

model TeacherToStudent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  confirmationStatus TeacherToStudentStatusesEnum @map("confirmation_status")

  Teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @map("teacher_id")
  Student   Student @relation(fields: [studentId], references: [id])
  studentId String  @map("student_id")

  @@map("teacher_to_student")
}

enum TeacherToStudentStatusesEnum {
  NeedsStudentConfirmation
  NeedsTeacherConfirmation
  Confirmed
}

// ========================= groups =========================

model Group {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title          String
  isPersonal     Boolean @map("is_personal")
  invitationLink String? @unique @map("invitation_link")

  Teachers Teacher[]
  Students Student[]

  @@map("groups")
}

// ========================= subjects =========================

model Subject {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title String @unique

  Teachers Teacher[]
  Tests    Test[]

  @@map("subjects")
}

// ========================= tests =========================

// ===== tests =====

model Test {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title          String
  file           String?
  language       String?
  testDuration   Int?    @map("test_duration")
  textSelectable Boolean @default(false)

  access     TestAccessesEnum    @default(Hidden)
  pageFormat TestPageFormatsEnum @default(SinglePage) @map("page_format")
  resultType TestResultTypesEnum @default(Percents) @map("result_type")
  testStatus TestStatusesEnum    @default(InCreation) @map("test_status")

  Subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?  @map("subject_id")
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?  @map("creator_id")

  TestItems TestItem[]
  Todos     Todo[]

  @@map("tests")
}

enum TestAccessesEnum {
  Open
  Hidden
  TeachersOnly
  MyStudentsOnly

  @@map("test_accesses_enum")
}

enum TestPageFormatsEnum {
  SinglePage
  MultiPage

  @@map("test_page_formats_enum")
}

enum TestResultTypesEnum {
  Percents
  Points
  OneMistake

  @@map("test_results_enum")
}

enum TestStatusesEnum {
  InCreation
  InRework
  Complete

  @@map("test_statuses_enum")
}

// ===== test_items =====

model TestItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text     String?
  question String?
  media    String?
  points   Int?

  mediaType  TestItemMediaTypesEnum?  @map("media_type")
  answerType TestItemAnswerTypesEnum  @default(Text) @map("answer_type")
  optionType TestItemOptionTypesEnum? @map("option_type")

  Test   Test   @relation(fields: [testId], references: [id])
  testId String @map("test_id")

  TestItemOptions TestItemOption[]
  TodoItems       TodoItem[]
  TestItemAnswers TestItemAnswer[]

  @@map("test_items")
}

enum TestItemMediaTypesEnum {
  Image
  Audio
  PDF

  @@map("test_item_media_types_enum")
}

enum TestItemAnswerTypesEnum {
  Text
  Number
  Radio
  Checkbox

  @@map("test_item_answer_types_enum")
}

enum TestItemOptionTypesEnum {
  Text
  Image

  @@map("test_item_option_types_enum")
}

// ===== test_item_answers =====

model TestItemAnswer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text String

  TestItem   TestItem @relation(fields: [testItemId], references: [id])
  testItemId String   @map("test_item_id")

  @@map("test_item_answers")
}

// ===== test_item_options =====

model TestItemOption {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text  String?
  media String?

  TestItem   TestItem @relation(fields: [testItemId], references: [id])
  testItemId String   @map("test_item_id")

  @@map("test_item_options")
}

// ========================= todos =========================

// ===== todos =====

model Todo {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  startTime    DateTime?        @map("start_time")
  deadline     DateTime?
  result       Decimal?
  todoDuration Int?             @map("todo_duration")
  autoComments Boolean          @default(true) @map("auto_comments")
  todoStatus   TodoStatusesEnum @default(NotStarted) @map("todo_status")

  Test      Test     @relation(fields: [testId], references: [id])
  testId    String   @map("test_id")
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?  @map("teacher_id")

  TodoItems TodoItem[]

  @@map("todos")
}

enum TodoStatusesEnum {
  Started
  NotStarted
  Complete

  @@map("todo_statuses_enum")
}

// ===== todo_items =====

model TodoItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studentAnswer String  @map("student_answer")
  isCorrect     Boolean @map("is_correct")

  Todo       Todo     @relation(fields: [todoId], references: [id])
  todoId     String   @map("todo_id")
  TestItem   TestItem @relation(fields: [testItemId], references: [id])
  testItemId String   @map("test_item_id")

  Comments Comment[]

  @@map("todo_items")
}

// ===== comments =====

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text  String?
  media String?
  type  CommentTypesEnum

  Teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String   @map("teacher_id")
  TodoItem   TodoItem @relation(fields: [todoItemId], references: [id])
  todoItemId String   @map("todo_item_id")

  @@map("comments")
}

enum CommentTypesEnum {
  NoMediaComment
  ImageComment
  AudioComment
  PDFComment

  @@map("comment_types_enum")
}
