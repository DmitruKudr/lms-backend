generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================= base entities =========================

model base_entity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@ignore
}

model status_entity {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  @@ignore
}

enum BaseStatusesEnum {
  Active
  Archived
}

// ========================= users =========================

// ===== user roles =====

model UserRole {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title       String
  permissions UserPermissionsEnum[]
  type        UserRoleTypesEnum

  Users User[]

  @@map("user_roles")
}

enum UserRoleTypesEnum {
  Admin
  SuperAdmin
  Parent
  Student
  SelfStudent
  Teacher
  TestCreator
}

enum UserPermissionsEnum {
  All
  GetUsers
  GetTests
}

// ===== users =====

model User {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  name     String
  username String  @unique
  email    String  @unique
  password String
  avatar   String?
  link     String? @unique

  Role   UserRole @relation(fields: [roleId], references: [id])
  roleId String   @map("role_id")

  Parent  Parent?
  Student Student?
  Teacher Teacher?

  @@map("users")
}

// ===== parents =====

model Parent {
  id   String  @id @unique
  post String?

  User User @relation(fields: [id], references: [id])

  Students Student[]

  @@map("parent")
}

// ===== students =====

model Student {
  id          String    @id @unique
  institution String?
  birthDate   DateTime? @map("birth_date")

  User User @relation(fields: [id], references: [id])

  Parents  Parent[]
  Teachers Teacher[]

  @@map("students")
}

// ===== teachers =====

model Teacher {
  id   String  @id @unique
  post String?

  User User @relation(fields: [id], references: [id])

  Students Student[]
  Groups   Group[]
  Subjects Subject[]
  Tests    Test[]
  Comments Comment[]

  @@map("teachers")
}

// ========================= groups =========================

model Group {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title       String
  groupStatus GroupStatusesEnum @default(Regular)

  Teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String  @map("teacher_id")

  @@map("groups")
}

enum GroupStatusesEnum {
  Regular
  Marked
  Hidden
}

// ========================= subjects =========================

model Subject {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title String @unique

  Teachers Teacher[]
  Tests    Test[]

  @@map("subjects")
}

// ========================= tests =========================

// ===== tests =====

model Test {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title        String
  testDuration Int?               @map("test_duration")
  testStatus   TestStatusesEnum[] @default([Hidden, InCreation]) @map("test_status")
  type         TestTypesEnum[]    @default([SinglePage])

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @map("subject_id")
  Creator   Teacher @relation(fields: [creatorId], references: [id])
  creatorId String  @map("creator_id")

  TestItems TestItem[]
  Todos     Todo[]

  @@map("tests")
}

enum TestStatusesEnum {
  Open
  Hidden
  TeachersOnly
  InRework
  InCreation
}

enum TestTypesEnum {
  SinglePage
  MultiPage
  TextSelectable
}

// ===== test items =====

model TestItem {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  title    String
  question String?
  answer   String
  media    String?
  points   Int?
  type     TestItemTypesEnum[]

  Test   Test   @relation(fields: [testId], references: [id])
  testId String @map("test_id")

  TestItemOptions TestItemOption[]
  TodoItems       TodoItem[]

  @@map("test_items")
}

enum TestItemTypesEnum {
  NoMediaItem
  ImageItem
  AudioItem
  PDFItem
  TextAnswer
  NumericaAnswer
  RadioAnswer
  CheckboxAnswer
  TextOptions
  ImageOptions
}

// ===== test item options =====

model TestItemOption {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  text   String?
  media  String?
  points Int?

  TestItem   TestItem @relation(fields: [testItemId], references: [id])
  testItemId String   @map("test_item_id")

  @@map("test_item_options")
}

// ========================= todos =========================

// ===== todos =====

model Todo {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  todoStatus   TodoStatusesEnum @default(NotStarted) @map("todo_status")
  startTime    DateTime?        @map("start_time")
  deadline     DateTime?
  result       Decimal?
  todoDuration Int?             @map("todo_duration")
  autocomments Boolean

  Test   Test   @relation(fields: [testId], references: [id])
  testId String @map("test_id")

  TodoItems TodoItem[]

  @@map("todos")
}

enum TodoStatusesEnum {
  Started
  NotStarted
  Complete
}

// ===== todo items =====

model TodoItem {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  studentAnswer String @map("student_answer")

  Todo       Todo     @relation(fields: [todoId], references: [id])
  todoId     String   @map("todo_id")
  TestItem   TestItem @relation(fields: [testItemId], references: [id])
  testItemId String   @map("test_item_id")

  Comments Comment[]

  @@map("todo_items")
}

// ===== comments =====

model Comment {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    BaseStatusesEnum @default(Active)

  text  String?
  media String?
  type  CommentTypesEnum

  Teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String   @map("teacher_id")
  TodoItem   TodoItem @relation(fields: [todoItemId], references: [id])
  todoItemId String   @map("todo_item_id")

  @@map("comments")
}

enum CommentTypesEnum {
  NoMediaComment
  ImageComment
  AudioComment
  PDFComment
}
